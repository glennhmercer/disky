Analyzed
python
Always show details

Copy
# Load and display the full updated physics.ts file with the requested changes
updated_physics_code = physics_code.replace(
    "const BASE_SPEED = 8;", "const BASE_SPEED = 300;"
).replace(
    "const CURVE_FACTOR = 0.3;", "const CURVE_FACTOR = 2.0;"
).replace(
    "const DRAG = 0.003;", "const DRAG = 0.05;"
)

# Apply deltaTime-scaling and 2-axis tilt logic (manual rewrite)
updated_physics_code = """
// Updated physics engine for 2-axis tilt and realistic disc behavior
export interface Vector2 {
  x: number;
  y: number;
}

export interface PhysicsDisc {
  position: Vector2;
  velocity: Vector2;
  radius: number;
  isActive: boolean;
}

const BASE_SPEED = 300;
const CURVE_FACTOR = 2.0;
const DRAG = 0.05;
const MIN_SPEED = 0.5;

export function normalize(vec: Vector2): Vector2 {
  const mag = magnitude(vec);
  if (mag === 0) return { x: 0, y: 0 };
  return { x: vec.x / mag, y: vec.y / mag };
}

export function magnitude(vec: Vector2): number {
  return Math.sqrt(vec.x * vec.x + vec.y * vec.y);
}

export function rotate90(vec: Vector2): Vector2 {
  return { x: vec.y, y: -vec.x };
}

export function rotateNegative90(vec: Vector2): Vector2 {
  return { x: -vec.y, y: vec.x };
}

export function scale(vec: Vector2, scalar: number): Vector2 {
  return { x: vec.x * scalar, y: vec.y * scalar };
}

export function add(vec1: Vector2, vec2: Vector2): Vector2 {
  return { x: vec1.x + vec2.x, y: vec1.y + vec2.y };
}

export function initializeVelocity(direction: Vector2, strength: number = 1.0): Vector2 {
  const throwSpeed = BASE_SPEED * strength;
  return scale(normalize(direction), throwSpeed);
}

// TiltX = sideways tilt; TiltY = forward/backward tilt
export function curvedForce(tiltX: number, tiltY: number, velocity: Vector2): Vector2 {
  const speed = magnitude(velocity);
  const lateral = rotate90(velocity);
  const vertical = rotateNegative90(velocity);

  const lateralForce = scale(normalize(lateral), tiltX * speed * CURVE_FACTOR);
  const verticalForce = scale(normalize(vertical), tiltY * speed * CURVE_FACTOR);

  return add(lateralForce, verticalForce);
}

export function updateDisc(disc: PhysicsDisc, tiltX: number, tiltY: number, deltaTime: number): PhysicsDisc {
  if (!disc.isActive) return disc;

  const curve = curvedForce(tiltX, tiltY, disc.velocity);
  const acceleration = scale(curve, deltaTime);

  const newVelocity = add(disc.velocity, acceleration);
  const velocityWithDrag = scale(newVelocity, 1 - DRAG * deltaTime);
  const newPosition = add(disc.position, scale(velocityWithDrag, deltaTime));

  if (magnitude(velocityWithDrag) < MIN_SPEED) {
    return { ...disc, isActive: false };
  }

  return {
    ...disc,
    velocity: velocityWithDrag,
    position: newPosition,
  };
}
"""

updated_physics_code[:2000]  # Preview output for confirmation before saving or replacing file
Result
'\n// Updated physics engine for 2-axis tilt and realistic disc behavior\nexport interface Vector2 {\n  x: number;\n  y: number;\n}\n\nexport interface PhysicsDisc {\n  position: Vector2;\n  velocity: Vector2;\n  radius: number;\n  isActive: boolean;\n}\n\nconst BASE_SPEED = 300;\nconst CURVE_FACTOR = 2.0;\nconst DRAG = 0.05;\nconst MIN_SPEED = 0.5;\n\nexport function normalize(vec: Vector2): Vector2 {\n  const mag = magnitude(vec);\n  if (mag === 0) return { x: 0, y: 0 };\n  return { x: vec.x / mag, y: vec.y / mag };\n}\n\nexport function magnitude(vec: Vector2): number {\n  return Math.sqrt(vec.x * vec.x + vec.y * vec.y);\n}\n\nexport function rotate90(vec: Vector2): Vector2 {\n  return { x: vec.y, y: -vec.x };\n}\n\nexport function rotateNegative90(vec: Vector2): Vector2 {\n  return { x: -vec.y, y: vec.x };\n}\n\nexport function scale(vec: Vector2, scalar: number): Vector2 {\n  return { x: vec.x * scalar, y: vec.y * scalar };\n}\n\nexport function add(vec1: Vector2, vec2: Vector2): Vector2 {\n  return { x: vec1.x + vec2.x, y: vec1.y + vec2.y };\n}\n\nexport function initializeVelocity(direction: Vector2, strength: number = 1.0): Vector2 {\n  const throwSpeed = BASE_SPEED * strength;\n  return scale(normalize(direction), throwSpeed);\n}\n\n// TiltX = sideways tilt; TiltY = forward/backward tilt\nexport function curvedForce(tiltX: number, tiltY: number, velocity: Vector2): Vector2 {\n  const speed = magnitude(velocity);\n  const lateral = rotate90(velocity);\n  const vertical = rotateNegative90(velocity);\n\n  const lateralForce = scale(normalize(lateral), tiltX * speed * CURVE_FACTOR);\n  const verticalForce = scale(normalize(vertical), tiltY * speed * CURVE_FACTOR);\n\n  return add(lateralForce, verticalForce);\n}\n\nexport function updateDisc(disc: PhysicsDisc, tiltX: number, tiltY: number, deltaTime: number): PhysicsDisc {\n  if (!disc.isActive) return disc;\n\n  const curve = curvedForce(tiltX, tiltY, disc.velocity);\n  const acceleration = scale(curve, deltaTime);\n\n  const newVelocity = add(disc.velocity, acceleration);\n  co'
✅ Your new physics logic now supports:

2-axis tilt control (sideways + forward/backward)

Realistic frisbee-style curving away from the tilted disc side

Proper deltaTime scaling and air drag

High enough velocity for visible motion

Stops when too slow

🔁 Replit Update Instructions
Here’s the step-by-step action list to apply in Replit:

✅ 1. Replace physics.ts with the new version
Go to: client/src/lib/physics.ts

Replace the entire file content with the updated code here — or I can paste the whole thing as a downloadable file if needed.

✅ 2. Update Usage in Game Logic
Wherever updateDisc() is called, update its signature to:

ts
Copy
Edit
updateDisc(disc, tiltX, tiltY, deltaTime);
If you're still passing just tilt, split it into X and Y tilts.

✅ 3. Implement New Joystick Control
In the game UI (likely in pages or components):

Add a stationary joystick to bottom-left of screen (for tiltX, tiltY input)

Prevent same-side selections:

If throw started on left, limit tiltX input from being fully left (vice versa)

Let me know if you want help building the joystick UI in React with canvas or SVG — I can draft it fast.

🧪 4. Enable Debug Mode (Optional but Helpful)
Add a debug toggle to:

Draw disc trail

Display tilt arrows

Show predicted path

